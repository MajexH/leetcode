/**
 * 一个BST完事儿
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
  let flag = Array(grid.length), res = 0
  for (let i = 0; i < grid.length; i++) {
    flag[i] = Array(grid[i].length).fill(false)
  }
  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid[i].length; j++) {
      if (grid[i][j] === '1' && !flag[i][j]) {
        // BST
        let queue = []
        queue.push({
          x: i,
          y: j
        })
        // 第一次超时是因为 有重复的加入了 因为 之前的逻辑是在出队列的时候标识这个点已经访问过了 
        // 其实在入队列的时候 就可以直接标识 这个点访问过了 这项可以修剪掉很多重复的入队操作
        while (queue.length !== 0) {
          let top = queue.shift()
          flag[top.x][top.y] = true
          if (top.x - 1 >= 0 && grid[top.x - 1][top.y] === '1' && !flag[top.x - 1][top.y]) {
            queue.push({
              x: top.x - 1,
              y: top.y
            })
            flag[top.x - 1][top.y] = true
          }
          if (top.x + 1 < grid.length && grid[top.x + 1][top.y] === '1' && !flag[top.x + 1][top.y]) {
            queue.push({
              x: top.x + 1,
              y: top.y
            })
            flag[top.x + 1][top.y] = true
          }
          if (top.y - 1 >= 0 && grid[top.x][top.y - 1] === '1' && !flag[top.x][top.y - 1]) {
            queue.push({
              x: top.x,
              y: top.y - 1
            })
            flag[top.x][top.y - 1] = true
          }
          if (top.y + 1 < grid[i].length && grid[top.x][top.y + 1] === '1' && !flag[top.x][top.y + 1]) {
            queue.push({
              x: top.x,
              y: top.y + 1
            })
            flag[top.x][top.y + 1] = true
          }
        }
        res++
      }
    }
  }
  return res
};

console.log(numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))